#include "MachineDescription.h"
#include "MDValidator.h"

#include <gtest/gtest.h>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/iostreams/stream.hpp>
#include <boost/iostreams/device/array.hpp>

static const std::string input_data_for_tape = "111-11=";


boost::property_tree::ptree CreateTree(const std::string &json_content)
{
    boost::property_tree::ptree tree;
    boost::iostreams::stream<boost::iostreams::array_source> stream(json_content.c_str(), json_content.size());
    boost::property_tree::read_json(stream, tree);
    return tree;
}

TEST(MachineDescription, good_config)
{
    auto json_description = CreateTree("{\n"
                                       "  \"name\": \"unary_sub\",\n"
                                       "  \"alphabet\": [\n"
                                       "    \"1\",\n"
                                       "    \".\",\n"
                                       "    \"-\",\n"
                                       "    \"=\"\n"
                                       "  ],\n"
                                       "  \"blank\": \".\",\n"
                                       "  \"states\": [\n"
                                       "    \"scanright\",\n"
                                       "    \"eraseone\",\n"
                                       "    \"subone\",\n"
                                       "    \"skip\",\n"
                                       "    \"HALT\"\n"
                                       "  ],\n"
                                       "  \"initial\": \"scanright\",\n"
                                       "  \"finals\": [\n"
                                       "    \"HALT\"\n"
                                       "  ],\n"
                                       "  \"transitions\": {\n"
                                       "    \"scanright\": [\n"
                                       "      {\n"
                                       "        \"read\": \".\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \"1\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"-\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \"-\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"=\",\n"
                                       "        \"to_state\": \"eraseone\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      }\n"
                                       "    ],\n"
                                       "    \"eraseone\": [\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"subone\",\n"
                                       "        \"write\": \"=\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"-\",\n"
                                       "        \"to_state\": \"HALT\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      }\n"
                                       "    ],\n"
                                       "    \"subone\": [\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"subone\",\n"
                                       "        \"write\": \"1\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"-\",\n"
                                       "        \"to_state\": \"skip\",\n"
                                       "        \"write\": \"-\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      }\n"
                                       "    ],\n"
                                       "    \"skip\": [\n"
                                       "      {\n"
                                       "        \"read\": \".\",\n"
                                       "        \"to_state\": \"skip\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      }\n"
                                       "    ]\n"
                                       "  }\n"
                                       "}");
    std::set<char> alphabet;
    std::set<std::string> states;
    struct SMachineDescription machine_description;
    EXPECT_NO_THROW(machine_description = GetMachineDescription(json_description, alphabet, states));
    EXPECT_NO_THROW(ValidateMachineDescription(input_data_for_tape, machine_description, alphabet, states));
}

TEST(MachineDescription, bad_key_name_reaad)
{
    auto json_description = CreateTree("{\n"
                                       "  \"name\": \"unary_sub\",\n"
                                       "  \"alphabet\": [\n"
                                       "    \"1\",\n"
                                       "    \".\",\n"
                                       "    \"-\",\n"
                                       "    \"=\"\n"
                                       "  ],\n"
                                       "  \"blank\": \".\",\n"
                                       "  \"states\": [\n"
                                       "    \"scanright\",\n"
                                       "    \"eraseone\",\n"
                                       "    \"subone\",\n"
                                       "    \"skip\",\n"
                                       "    \"HALT\"\n"
                                       "  ],\n"
                                       "  \"initial\": \"scanright\",\n"
                                       "  \"finals\": [\n"
                                       "    \"HALT\"\n"
                                       "  ],\n"
                                       "  \"transitions\": {\n"
                                       "    \"scanright\": [\n"
                                       "      {\n"
                                       "        \"read\": \".\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \"1\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"-\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \"-\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"=\",\n"
                                       "        \"to_state\": \"eraseone\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      }\n"
                                       "    ],\n"
                                       "    \"eraseone\": [\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"subone\",\n"
                                       "        \"write\": \"=\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"-\",\n"
                                       "        \"to_state\": \"HALT\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      }\n"
                                       "    ],\n"
                                       "    \"subone\": [\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"subone\",\n"
                                       "        \"write\": \"1\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"-\",\n"
                                       "        \"to_state\": \"skip\",\n"
                                       "        \"write\": \"-\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      }\n"
                                       "    ],\n"
                                       "    \"skip\": [\n"
                                       "      {\n"
                                       "        \"read\": \".\",\n"
                                       "        \"to_state\": \"skip\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       /* Bad keyward 'reaad' here */
                                       "        \"reaad\": \"1\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      }\n"
                                       "    ]\n"
                                       "  }\n"
                                       "}");
    std::set<char> alphabet;
    std::set<std::string> states;
    struct SMachineDescription machine_description;
    EXPECT_ANY_THROW(machine_description = GetMachineDescription(json_description, alphabet, states));
    EXPECT_ANY_THROW(ValidateMachineDescription(input_data_for_tape, machine_description, alphabet, states));
}

TEST(MachineDescription, bad_key_name_writtte)
{
    auto json_description = CreateTree("{\n"
                                       "  \"name\": \"unary_sub\",\n"
                                       "  \"alphabet\": [\n"
                                       "    \"1\",\n"
                                       "    \".\",\n"
                                       "    \"-\",\n"
                                       "    \"=\"\n"
                                       "  ],\n"
                                       "  \"blank\": \".\",\n"
                                       "  \"states\": [\n"
                                       "    \"scanright\",\n"
                                       "    \"eraseone\",\n"
                                       "    \"subone\",\n"
                                       "    \"skip\",\n"
                                       "    \"HALT\"\n"
                                       "  ],\n"
                                       "  \"initial\": \"scanright\",\n"
                                       "  \"finals\": [\n"
                                       "    \"HALT\"\n"
                                       "  ],\n"
                                       "  \"transitions\": {\n"
                                       "    \"scanright\": [\n"
                                       "      {\n"
                                       "        \"read\": \".\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \"1\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"-\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \"-\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"=\",\n"
                                       "        \"to_state\": \"eraseone\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      }\n"
                                       "    ],\n"
                                       "    \"eraseone\": [\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"subone\",\n"
                                       "        \"write\": \"=\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"-\",\n"
                                       "        \"to_state\": \"HALT\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      }\n"
                                       "    ],\n"
                                       "    \"subone\": [\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"subone\",\n"
                                       "        \"write\": \"1\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"-\",\n"
                                       "        \"to_state\": \"skip\",\n"
                                       /* Bad keyward 'writtte' here */
                                       "        \"writtte\": \"-\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      }\n"
                                       "    ],\n"
                                       "    \"skip\": [\n"
                                       "      {\n"
                                       "        \"read\": \".\",\n"
                                       "        \"to_state\": \"skip\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      }\n"
                                       "    ]\n"
                                       "  }\n"
                                       "}");
    std::set<char> alphabet;
    std::set<std::string> states;
    struct SMachineDescription machine_description;
    EXPECT_ANY_THROW(machine_description = GetMachineDescription(json_description, alphabet, states));
    EXPECT_ANY_THROW(ValidateMachineDescription(input_data_for_tape, machine_description, alphabet, states));
}

TEST(MachineDescription, double_char_in_alphabet)
{
    auto json_description = CreateTree("{\n"
                                       "  \"name\": \"unary_sub\",\n"
                                       "  \"alphabet\": [\n"
                                       /* double char here */
                                       "    \".\",\n"
                                       "    \".\",\n"
                                       "    \"-\",\n"
                                       "    \"=\"\n"
                                       "  ],\n"
                                       "  \"blank\": \".\",\n"
                                       "  \"states\": [\n"
                                       "    \"scanright\",\n"
                                       "    \"eraseone\",\n"
                                       "    \"subone\",\n"
                                       "    \"skip\",\n"
                                       "    \"HALT\"\n"
                                       "  ],\n"
                                       "  \"initial\": \"scanright\",\n"
                                       "  \"finals\": [\n"
                                       "    \"HALT\"\n"
                                       "  ],\n"
                                       "  \"transitions\": {\n"
                                       "    \"scanright\": [\n"
                                       "      {\n"
                                       "        \"read\": \".\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \"1\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"-\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \"-\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"=\",\n"
                                       "        \"to_state\": \"eraseone\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      }\n"
                                       "    ],\n"
                                       "    \"eraseone\": [\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"subone\",\n"
                                       "        \"write\": \"=\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"-\",\n"
                                       "        \"to_state\": \"HALT\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      }\n"
                                       "    ],\n"
                                       "    \"subone\": [\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"subone\",\n"
                                       "        \"write\": \"1\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"-\",\n"
                                       "        \"to_state\": \"skip\",\n"
                                       "        \"write\": \"-\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      }\n"
                                       "    ],\n"
                                       "    \"skip\": [\n"
                                       "      {\n"
                                       "        \"read\": \".\",\n"
                                       "        \"to_state\": \"skip\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      }\n"
                                       "    ]\n"
                                       "  }\n"
                                       "}");
    std::set<char> alphabet;
    std::set<std::string> states;
    struct SMachineDescription machine_description;
    EXPECT_NO_THROW(machine_description = GetMachineDescription(json_description, alphabet, states));
    EXPECT_ANY_THROW(ValidateMachineDescription(input_data_for_tape, machine_description, alphabet, states));
}

TEST(MachineDescription, bad_value_in_states)
{
    auto json_description = CreateTree("{\n"
                                       "  \"name\": \"unary_sub\",\n"
                                       "  \"alphabet\": [\n"
                                       "    \"1\",\n"
                                       "    \".\",\n"
                                       "    \"-\",\n"
                                       "    \"=\"\n"
                                       "  ],\n"
                                       "  \"blank\": \".\",\n"
                                       "  \"states\": [\n"
                                       "    \"scanright\",\n"
                                       /* bad value 'erasene' here */
                                       "    \"erasene\",\n"
                                       "    \"subone\",\n"
                                       "    \"skip\",\n"
                                       "    \"HALT\"\n"
                                       "  ],\n"
                                       "  \"initial\": \"scanright\",\n"
                                       "  \"finals\": [\n"
                                       "    \"HALT\"\n"
                                       "  ],\n"
                                       "  \"transitions\": {\n"
                                       "    \"scanright\": [\n"
                                       "      {\n"
                                       "        \"read\": \".\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \"1\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"-\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \"-\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"=\",\n"
                                       "        \"to_state\": \"eraseone\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      }\n"
                                       "    ],\n"
                                       "    \"eraseone\": [\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"subone\",\n"
                                       "        \"write\": \"=\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"-\",\n"
                                       "        \"to_state\": \"HALT\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      }\n"
                                       "    ],\n"
                                       "    \"subone\": [\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"subone\",\n"
                                       "        \"write\": \"1\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"-\",\n"
                                       "        \"to_state\": \"skip\",\n"
                                       "        \"write\": \"-\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      }\n"
                                       "    ],\n"
                                       "    \"skip\": [\n"
                                       "      {\n"
                                       "        \"read\": \".\",\n"
                                       "        \"to_state\": \"skip\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      }\n"
                                       "    ]\n"
                                       "  }\n"
                                       "}");
    std::set<char> alphabet;
    std::set<std::string> states;
    struct SMachineDescription machine_description;
    EXPECT_NO_THROW(machine_description = GetMachineDescription(json_description, alphabet, states));
    EXPECT_ANY_THROW(ValidateMachineDescription(input_data_for_tape, machine_description, alphabet, states));
}

TEST(MachineDescription, bad_value_to_state_in_transitions)
{
    auto json_description = CreateTree("{\n"
                                       "  \"name\": \"unary_sub\",\n"
                                       "  \"alphabet\": [\n"
                                       "    \"1\",\n"
                                       "    \".\",\n"
                                       "    \"-\",\n"
                                       "    \"=\"\n"
                                       "  ],\n"
                                       "  \"blank\": \".\",\n"
                                       "  \"states\": [\n"
                                       "    \"scanright\",\n"
                                       "    \"eraseone\",\n"
                                       "    \"subone\",\n"
                                       "    \"skip\",\n"
                                       "    \"HALT\"\n"
                                       "  ],\n"
                                       "  \"initial\": \"scanright\",\n"
                                       "  \"finals\": [\n"
                                       "    \"HALT\"\n"
                                       "  ],\n"
                                       "  \"transitions\": {\n"
                                       "    \"scanright\": [\n"
                                       "      {\n"
                                       "        \"read\": \".\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \"1\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"-\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \"-\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"=\",\n"
                                       "        \"to_state\": \"eraseone\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      }\n"
                                       "    ],\n"
                                       "    \"eraseone\": [\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"subone\",\n"
                                       "        \"write\": \"=\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"-\",\n"
                                       "        \"to_state\": \"HALT\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      }\n"
                                       "    ],\n"
                                       "    \"subone\": [\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"subone\",\n"
                                       "        \"write\": \"1\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"-\",\n"
                                       "        \"to_state\": \"skip\",\n"
                                       "        \"write\": \"-\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      }\n"
                                       "    ],\n"
                                       "    \"skip\": [\n"
                                       "      {\n"
                                       "        \"read\": \".\",\n"
                                       "        \"to_state\": \"skip\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       /* Bad value 'scanight' here */
                                       "        \"to_state\": \"scanight\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      }\n"
                                       "    ]\n"
                                       "  }\n"
                                       "}");
    std::set<char> alphabet;
    std::set<std::string> states;
    struct SMachineDescription machine_description;
    EXPECT_NO_THROW(machine_description = GetMachineDescription(json_description, alphabet, states));
    EXPECT_ANY_THROW(ValidateMachineDescription(input_data_for_tape, machine_description, alphabet, states));
}

TEST(MachineDescription, bad_action_lefft_in_transitions) {
    auto json_description = CreateTree("{\n"
                                       "  \"name\": \"unary_sub\",\n"
                                       "  \"alphabet\": [\n"
                                       "    \"1\",\n"
                                       "    \".\",\n"
                                       "    \"-\",\n"
                                       "    \"=\"\n"
                                       "  ],\n"
                                       "  \"blank\": \".\",\n"
                                       "  \"states\": [\n"
                                       "    \"scanright\",\n"
                                       "    \"eraseone\",\n"
                                       "    \"subone\",\n"
                                       "    \"skip\",\n"
                                       "    \"HALT\"\n"
                                       "  ],\n"
                                       "  \"initial\": \"scanright\",\n"
                                       "  \"finals\": [\n"
                                       "    \"HALT\"\n"
                                       "  ],\n"
                                       "  \"transitions\": {\n"
                                       "    \"scanright\": [\n"
                                       "      {\n"
                                       "        \"read\": \".\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \"1\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"-\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \"-\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"=\",\n"
                                       "        \"to_state\": \"eraseone\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      }\n"
                                       "    ],\n"
                                       "    \"eraseone\": [\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"subone\",\n"
                                       "        \"write\": \"=\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"-\",\n"
                                       "        \"to_state\": \"HALT\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      }\n"
                                       "    ],\n"
                                       "    \"subone\": [\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"subone\",\n"
                                       "        \"write\": \"1\",\n"
                                       /* bad value 'LEFFFT' here */
                                       "        \"action\": \"LEFFFT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"-\",\n"
                                       "        \"to_state\": \"skip\",\n"
                                       "        \"write\": \"-\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      }\n"
                                       "    ],\n"
                                       "    \"skip\": [\n"
                                       "      {\n"
                                       "        \"read\": \".\",\n"
                                       "        \"to_state\": \"skip\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"LEFT\"\n"
                                       "      },\n"
                                       "      {\n"
                                       "        \"read\": \"1\",\n"
                                       "        \"to_state\": \"scanright\",\n"
                                       "        \"write\": \".\",\n"
                                       "        \"action\": \"RIGHT\"\n"
                                       "      }\n"
                                       "    ]\n"
                                       "  }\n"
                                       "}");
    std::set<char> alphabet;
    std::set<std::string> states;
    struct SMachineDescription machine_description;
    EXPECT_ANY_THROW(machine_description = GetMachineDescription(json_description, alphabet, states));
    EXPECT_ANY_THROW(ValidateMachineDescription(input_data_for_tape, machine_description, alphabet, states));
}
